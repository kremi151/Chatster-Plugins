/**
 * Copyright 2020 Michel Kremer (kremi151)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lu.kremi151.chatster.plugin.ccredentials

import lu.kremi151.chatster.api.service.CredentialStore
import org.slf4j.LoggerFactory
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.lang.invoke.MethodHandles
import java.security.SecureRandom
import java.util.*
import javax.crypto.Cipher
import javax.crypto.CipherInputStream
import javax.crypto.CipherOutputStream
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

class CipherCredentialStore(
        private val key: String
): CredentialStore {

    companion object {
        private val LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass())

        private const val PLAINTEXT_FILE_NAME = "credentials.properties"
        private const val ENCRYPTED_FILE_NAME = "credentials.enc"
    }

    private val random = SecureRandom()
    private lateinit var credentialsCache: Properties

    private fun storeCredentialsToFS() {
        val ivBytes = ByteArray(16)
        random.nextBytes(ivBytes)
        val ivSpec = IvParameterSpec(ivBytes)
        val keySpec = SecretKeySpec(key.toByteArray(), "AES")
        val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec)
        FileOutputStream(File(ENCRYPTED_FILE_NAME))
                .use { outputStream ->
                    outputStream.write(ivBytes)
                    outputStream.flush()
                    credentialsCache.store(
                            CipherOutputStream(outputStream, cipher),
                            "Generated by the cipher-credentials plugin for Chatster")
                    outputStream.flush()
                }
    }

    private fun loadPlaintextCredentialsFromFS() {
        val plaintextFile = File(PLAINTEXT_FILE_NAME)
        FileInputStream(plaintextFile).use { inputStream -> credentialsCache.load(inputStream) }
        storeCredentialsToFS()
        plaintextFile.delete()
    }

    private fun loadEncryptedCredentialsFromFS() {
        val encryptedFile = File(ENCRYPTED_FILE_NAME)
        val decryptedFile = File(PLAINTEXT_FILE_NAME)
        if (!encryptedFile.exists() && decryptedFile.exists()) {
            LOGGER.info("Migrating unencrypted credentials file to use encryption")
            loadPlaintextCredentialsFromFS()
            return
        }
        val keySpec = SecretKeySpec(key.toByteArray(), "AES")
        val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
        FileInputStream(encryptedFile)
                .use { inputStream ->
                    val ivBytes = ByteArray(16)
                    inputStream.read(ivBytes)
                    val ivSpec = IvParameterSpec(ivBytes)
                    cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec)
                    credentialsCache.load(CipherInputStream(inputStream, cipher))
                }
    }

    @Synchronized
    override fun readCredential(name: String): String? {
        if (!::credentialsCache.isInitialized) {
            credentialsCache = Properties()
            loadEncryptedCredentialsFromFS()
        }
        return credentialsCache.getProperty(name, null)
    }

    @Synchronized
    override fun storeCredential(name: String, value: String) {
        if (!::credentialsCache.isInitialized) {
            credentialsCache = Properties()
            loadEncryptedCredentialsFromFS()
        }
        credentialsCache.setProperty(name, value)
        storeCredentialsToFS()
    }

}